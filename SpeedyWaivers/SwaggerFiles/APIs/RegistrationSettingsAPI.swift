//
// RegistrationSettingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RegistrationSettingsAPI {
    /**

     - parameter venueId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registrationSettingsGetRegistrationSettings(venueId: Int, completion: @escaping ((_ data: RegistrationSettingsResponse?,_ error: Error?) -> Void)) {
        registrationSettingsGetRegistrationSettingsWithRequestBuilder(venueId: venueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /RegistrationSettings/{venueId}
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "settingValue" : "settingValue",
    "venueId" : 6,
    "settingId" : 0,
    "settingName" : "settingName"
  }, {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "settingValue" : "settingValue",
    "venueId" : 6,
    "settingId" : 0,
    "settingName" : "settingName"
  } ],
  "registrationFields" : [ {
    "displayName" : "displayName",
    "name" : "name",
    "show" : true,
    "required" : true
  }, {
    "displayName" : "displayName",
    "name" : "name",
    "show" : true,
    "required" : true
  } ],
  "waiverText" : "waiverText"
}}]
     
     - parameter venueId: (path)  

     - returns: RequestBuilder<RegistrationSettingsResponse> 
     */
    open class func registrationSettingsGetRegistrationSettingsWithRequestBuilder(venueId: Int) -> RequestBuilder<RegistrationSettingsResponse> {
        var path = "/RegistrationSettings/{venueId}"
        let venueIdPreEscape = "\(venueId)"
        let venueIdPostEscape = venueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{venueId}", with: venueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RegistrationSettingsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter request: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registrationSettingsGetRegistrationsettings(request: CreateRegistrationSettingsRequest, completion: @escaping ((_ data: [RegistrationSettingNoId]?,_ error: Error?) -> Void)) {
        registrationSettingsGetRegistrationsettingsWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /RegistrationSettings
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example=[ {
  "displayName" : "displayName",
  "name" : "name",
  "show" : true,
  "required" : true
}, {
  "displayName" : "displayName",
  "name" : "name",
  "show" : true,
  "required" : true
} ]}]
     
     - parameter request: (body)  

     - returns: RequestBuilder<[RegistrationSettingNoId]> 
     */
    open class func registrationSettingsGetRegistrationsettingsWithRequestBuilder(request: CreateRegistrationSettingsRequest) -> RequestBuilder<[RegistrationSettingNoId]> {
        let path = "/RegistrationSettings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[RegistrationSettingNoId]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
